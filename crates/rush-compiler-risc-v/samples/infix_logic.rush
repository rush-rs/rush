let mut count = 0;

let true_ = true;
let false_ = false;

fn main() {
        count += (true_ || false_ || increments_count()) as int; // += 1
        count += (false_ | false_) as int; // += 0
        count += (true_ | true_) as int; // += 1
        count += (false_ | increments_count() | false_ | true_) as int; // += 2
        count += (false_ && false_) as int; // += 0
        count += (false_ && true_ && false_) as int; // += 0
        count += (true_ && true_ && true_) as int; // += 1
        count += (true_ && true_ && (false_ || true_ || increments_count())) as int; // += 1
        false && exit(0); // nothing
        false || exit(count); // 6
}

fn increments_count() -> bool {
    count += 1;
    false
}
