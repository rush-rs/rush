/* 01: test unit values in args
fn foo(a: int, _: (), b: int) {
    exit(a * b)
}

fn _() {}

fn main() {
    let a = 1;
    a = 2;
    foo(2, _(), a)
}
*/

/* 02: test re-assignments
fn ex(cod: int) {
    let a = cod;
    a += 2;
    a -= 1;
    a *= 3;
    a /= 3;
    a **= 3;
    a %= 4;
}

fn main() {
    main();
    ex(1)
}

*/

/*
fn main() {
 let a = 5;
 a &= 3;
 exit(a);
}
*/


/*
fn fib(n: int) -> int {
    if n < 2 {
        n
    } else {
        fib(n - 1) + fib(n - 2)
    }
}

fn main() {
    let res = fib(30);
    exit(res/ 10000);
}
*/

/*
fn main() {
    let a = false;

    let b = if a {
        1
    } else {
        2
    };
    exit(b);
}
*/


fn pow(base: int, mut exponent: int) -> int {
    if exponent == 0 {
        return 1;
    }
    if exponent < 1 {
        return 0;
    }
    let mut res = base;
    loop {
        exponent -= 1;
        if exponent == 0 {
            break;
        }
        res = res * base;
    }
    return res;
}

fn main() {
    let mut last = 0 ;
    for i = 0; i < 10; i += 1 {
        last = i;
    }
    exit(last);
}
