fn call() -> int { add(get(), get()) }
fn add(a: int, b: int) -> int { a + b }
fn get() -> int { 1 }

fn add4(a: int, b: int, c: int, d: int) -> int { a + b + c + d }

fn sized_args(_a: int, _b: bool, _c: bool, d: int) -> int { d }

fn main() {
    let a = 1;
    1;
    3.0;
    'a';
    let yes = true;
    let no = false;
    exit(
        1 + 2 + a + call() - float(3.5) as int
        + params(1, 2.0, '\x03', true, 5, 6, 7, 8, 9, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0)
        + sized_args(42, yes, no, sized_args(30, no, yes, 6))
        + add4(0, 0, 10 / 3, 10 % 3)
        + (3 << a) + (2 << 300)
        + (3 >> 300) + (6 >> a)
    ); // = 209
}

fn float(a: float) -> float {
    a * 2.0 - 4.0
}

fn _ops(b: int) -> int {
    3 + b;
    4 - b;
    5 * b;
    6 | b;
    7 ^ b;
    8 & b
}

fn _vars() -> char {
    let _c = true;
    let d = 'a';
    let _a = 1;
    let _b = 2f;
    d
}

fn params(
    a: int, // %rdi
    b: float, // %xmm0
    c: char, // %sil
    d: bool, // %dl
    e: int, // %rcx
    f: int, // %r8
    g: int, // %r9
    h: int, // [%rbp+16]
    i: int, // [%rbp+24]
    j: float, // %xmm1
    k: float, // %xmm2
    l: float, // %xmm3
    m: float, // %xmm4
    n: float, // %xmm5
    o: float, // %xmm6
    p: float, // %xmm7
    q: float, // [%rbp+32]
    r: float, // [%rbp+40]
    s: float, // [%rbp+48]
) -> int {
    a + b as int + c as int + d as int + e + f + g + h + i + (j + k + l + m + n + o + p + q + r + s) as int
}
