////////////// PART ONE //////////////

// rush supports global variables
let mut answer = 42;

fn main() {
    let mut answer: int = 42; // int (i64)
    let pi: float = 3.14159265358979323846264338327950; // float (f64)
    let is_good: bool = false; // bool
    let _char = 'a'; // ASCII char (u8)

    // Re-assignments
    answer += 3;
    answer -= 3;
    answer *= 3;
    answer /= 3;
    // not for floats:
    answer %= 3;
    answer **= 3;
    answer |= 3;
    answer &= 3;
    answer ^= 3;
    answer >>= 3;
    answer <<= 3;

    let answer: float = 4_2f; // float literal, underscores are ignored, f forces float type
    // integer = DIGIT , { DIGIT | '_' } ;
    // [0-9][0-9_]*
    // float = DIGIT , { DIGIT | '_' } , ( '.' , DIGIT , { DIGIT | '_' } | 'f' ) ;
    // [0-9][0-9_]*(\.[0-9][0-9_]*|f)
    answer as int; // cast between primitive types

    (1 + 2) * 3 / 4 % 5 ** 6 - 7; // arithmetic operators
    1 >> 2 << 3 | 4 & 5 ^ 6; // bitwise operators
    true || false && true; // logical operators
    1 < 2; 1 <= 3; 1 > 0; 1 >= -1; 1 == 1; 1 != 2; // relational operators

    let _float = if answer > pi || is_good {
        answer
    } else if pi > answer {
        pi
    } else {
        is_good as float
    };

    exit(1); // -> ! // exit(code: int) -> (), uses WASI proc_exit(i32)
}

fn _add(left: int, right: int) -> int {
    left + right
}

////////////// PART TWO //////////////

/*
fn main() {
    let name = "rush";
    let array: [int; 3] = [1, 2, 3];
    println(name, "rush");

    loop { break; }
    while true { break; }

    // TODO: maybe?
    // for i = 0; i < len(name); i += 1 {
    //     let char_ = name[i];
    //     if char_ == 'u' { continue; }
    //     print(char_);
    // }
}
*/
