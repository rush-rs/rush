// expected return-value: 15
fn a() -> int {
    let mut a = 0;
    for i = 0; i < 10; i += 1 {
        loop {
            loop {
                loop {
                    for j = 10; j > 0; j -= 1 {
                        a += 1
                    }
                    for i = 0; i < 10; i += 1 {
                        continue;
                        a += 1
                    }
                    while false {
                        // this will never run
                    }
                    break;
                }
                break;
            }
            break;
        }
        a -= 1
    }

    let mut b = 0;
    while a > 85 {
        a -= 1;
        b += 1;
    }

    let mut c = 0f;
    for i = 0; i < b; i += 1 {
        for i = 0; i < 3; i += 1 {
            for i = 0; i < 5; i += 1 {
                for i = 0; true; { continue; } {
                }
                exit(99) // unreachable
            }

            c += 1.0;

            for i = 0; i < 5; i += 1 {
                for i = 0; { continue; }; {} {
                    exit(99) // unreachable
                }
                exit(99) // unreachable
            }

            for i = {continue;}; true; {} {}
            exit(99) // unreachable
        }
    }

    c as int
}

// expected return-value: 1
fn breaks() -> int {
    let mut c = 0;
    loop {
        for i = 0; true; {break;} {
            c += 1
        }
    }
    // c is now 1
    loop {
        for i = 0; { break; }; {} {
            exit(99) // unreachable
        }
        exit(99) // unreachable
    }

    loop {
        for i = {break;}; true; {} {
            exit(99) // unreachable
        }
        exit(99) // unreachable
    }

    c
}

// expected return-value: 35
fn continues() -> int {
    let mut c = 0;
    while c < 5 {
        for i = 0; true; {continue;} {
            c += 1
        }
        exit(99) // unreachable
    }
    // c is now 5

    let mut d = 0;
    while d < 10 {
        d += 1;
        for i = 0; { continue; }; {} {
            exit(99) // unreachable
        }
        exit(99) // unreachable
    }
    // d is now 10

    let mut e = 0;
    while e < 20 {
        e += 1;
        for i = {continue;}; true; {} {
            exit(99) // unreachable
        }
        exit(99) // unreachable
    }
    // e is now 20
    c + d + e
}


// expected return-value: 6
fn whiles() -> int {
    let mut c = 0;

    while c < 4 {
        c += 1;
        while { continue; } {
            exit(99) // unreachable
        }
        exit(99) // unreachable
    }
    // c is now 4

    let mut d = 2;
    loop {
        while { break; } {
            exit(99) // unreachable
        }
        exit(99) // unreachable
    }
    // d is still 2

    c + d
}

// expected return-value: 5
fn block_cond() -> int {
    let mut a = 0;
    for i = 0; {
        let true_ = true;
        if i < 5 && (true_ || false) {
            let mut b = 0;
            for i = 0; i < 10; i += 1 {
                b += 1;
                continue;
            }
            b == 10
        } else {
            false
        }
    }; i += 1 {
        a += 1
    }
    a
}

fn main() {
    exit(continues() - a() + breaks() - whiles() + block_cond() )
}
